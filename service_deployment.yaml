AWSTemplateFormatVersion: '2010-09-09'
Description: Number of instances to launch in your ECS cluster.
Parameters:
  VpcCIDR:
    Description: IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetCIDR:
    Description: IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24
  ContainerPort:
    Type: Number
    Default: 80

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MytweeterCluster
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'role-ecs-task-execution-tweeter'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ "ec2.amazonaws.com", "ecs-tasks.amazonaws.com"]
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: cloudwatchlog
      RetentionInDays: 1
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: tweeterapis
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      TaskRoleArn: !Ref ECSTaskExecutionRole
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      RequiresCompatibilities:
        - "FARGATE"
      ContainerDefinitions:
        - Name: "tweeter-apis"
          Image: 486278204635.dkr.ecr.eu-west-1.amazonaws.com/kafka-twitter-stream:latest
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: 'eu-west-1'
              awslogs-stream-prefix: 'tweeter'

  SecGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: SG for connectivity
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: 'service-tweeter-ecs-fargate'
      TaskDefinition: !Ref TaskDefinition
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecGroup
          Subnets:
            - !Ref PublicSubnet